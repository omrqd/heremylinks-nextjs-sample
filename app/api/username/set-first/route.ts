import { NextRequest, NextResponse } from 'next/server';
import { auth } from '@/lib/auth';
import db from '@/lib/db';
import { RowDataPacket } from 'mysql2';

interface User extends RowDataPacket {
  id: string;
  username: string;
  is_published: boolean;
}

export async function POST(request: NextRequest) {
  try {
    const session = await auth();

    if (!session?.user?.email) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    const { username } = await request.json();

    if (!username) {
      return NextResponse.json(
        { error: 'Username is required' },
        { status: 400 }
      );
    }

    // Validate username constraints
    if (username.length < 3 || username.length > 50) {
      return NextResponse.json(
        { error: 'Username must be between 3 and 50 characters' },
        { status: 400 }
      );
    }

    if (!/^[a-zA-Z0-9_-]+$/.test(username)) {
      return NextResponse.json(
        { error: 'Username can only contain letters, numbers, dashes, and underscores' },
        { status: 400 }
      );
    }

    // Get current user
    const [userRows] = await db.query<User[]>(
      'SELECT id, username, is_published FROM users WHERE email = ? LIMIT 1',
      [session.user.email]
    );

    const user = userRows[0];
    if (!user) {
      return NextResponse.json({ error: 'User not found' }, { status: 404 });
    }

    // Check if user already has a custom username (not auto-generated)
    const usernamePattern = /^[a-z]+\d+$/; // Matches auto-generated pattern like "john123"
    const isAutoGenerated = usernamePattern.test(user.username);
    
    if (!isAutoGenerated && user.username.length >= 3) {
      return NextResponse.json(
        { error: 'Username has already been set' },
        { status: 400 }
      );
    }

    // Check if username is available (case-insensitive)
    const [existingRows] = await db.query<User[]>(
      'SELECT id FROM users WHERE LOWER(username) = LOWER(?) AND id != ? LIMIT 1',
      [username, user.id]
    );

    if (existingRows.length > 0) {
      return NextResponse.json(
        { error: 'This username is already taken' },
        { status: 400 }
      );
    }

    // Update username and mark as published
    await db.query(
      'UPDATE users SET username = ?, is_published = TRUE WHERE id = ?',
      [username.toLowerCase(), user.id]
    );

    return NextResponse.json({
      success: true,
      username: username.toLowerCase(),
      message: 'Username set successfully'
    });

  } catch (error) {
    console.error('Set first username error:', error);
    return NextResponse.json(
      { error: 'Failed to set username' },
      { status: 500 }
    );
  }
}